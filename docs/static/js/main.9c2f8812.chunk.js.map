{"version":3,"sources":["github.js","App.js","serviceWorker.js","index.js"],"names":["github","getIssues","_getIssues","Object","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","axios","url","method","headers","Authorization","data","query","sent","abrupt","repository","issues","edges","stop","apply","this","arguments","createIssue","_createIssue","_callee2","issue","_context2","concat","title","bodyText","id","_x","App","editor","undefined","state","selectedIssue","setState","length","onIssueSelect","node","onNewNote","text","updatedIssue","objectSpread","e","target","value","render","issueId","console","log","_this2","react_default","createElement","Fragment","className","map","item","key","onClick","type","onChange","handleTitleChange","lib_default","getMdeInstance","getInsance","handleDescriptionChange","onSaveIssue","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c2f8812.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n  async getIssues() {\n    const response = await axios({\n      url: 'https://api.github.com/graphql',\n      method: 'post',\n      headers: {\n        Authorization: 'bearer b7b951dfe2f6da88597e0549c5ffbebb65be9dfe'\n      },\n      data: {\n        query: `\n                  query {\n                    repository(owner:\"drsmog\", name:\"devnote-storage\") {\n                      issues(last:20) {\n                        totalCount\n                        edges {\n                          node {\n                            id\n                            title\n                            bodyText\n                          }\n                        }\n                      }\n                    }\n                  }\n                `\n      }\n    });\n    return response.data.data.repository.issues.edges;\n  },\n\n  async createIssue(issue) {\n    const response = await axios({\n      url: 'https://api.github.com/graphql',\n      method: 'post',\n      headers: {\n        Authorization: 'bearer b7b951dfe2f6da88597e0549c5ffbebb65be9dfe'\n      },\n      data: {\n        query: `\n                mutation{\n                    createIssue(input:{\n                    repositoryId:\"MDEwOlJlcG9zaXRvcnkxODIzOTYyNTI=\",\n                    title:\"${issue.title}\"\n                    body:\"${issue.bodyText}\"\n                    }) {\n                        issue {\n                            id\n                        }\n                    }\n                }`\n      }\n    });\n    return response.data.data.createIssue.issue.id\n  }\n};\n","import React, { Component } from 'react';\nimport github from './github';\nimport SimpleMDE from 'react-simplemde-editor';\nimport 'easymde/dist/easymde.min.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n  editor = undefined;\n  state = {\n    issues: [],\n    selectedIssue: {\n      id: undefined,\n      title: '',\n      bodyText: ''\n    }\n  };\n  async componentDidMount() {\n    //download issues\n    const issues = await github.getIssues();\n    this.setState({ issues: issues });\n\n    //select first one or set on new\n    if (issues.length > 0) {\n      this.onIssueSelect(issues[0].node);\n    } else {\n      this.onNewNote();\n    }\n  }\n  handleDescriptionChange(text) {\n    const updatedIssue = {\n      ...this.state.selectedIssue,\n      bodyText: text\n    };\n    this.setState({ selectedIssue: updatedIssue });\n  }\n  handleTitleChange(e) {\n    const updatedIssue = {\n      ...this.state.selectedIssue,\n      title: e.target.value\n    };\n    this.setState({ selectedIssue: updatedIssue });\n  }\n  onIssueSelect(issue) {\n    this.setState({ selectedIssue: issue });\n    if(this.editor){\n      this.editor.render();\n    }\n  }\n  onNewNote() {\n    const newIssue = { id: null, title: '', bodyText: ' ' };\n    this.setState({ selectedIssue: newIssue });\n  }\n  async onSaveIssue() {\n    if (!this.state.selectedIssue.id) {\n      const issueId = await github.createIssue(this.state.selectedIssue);\n      this.setState({\n        selectedIssue: { ...this.state.selectedIssue, id: issueId }\n      });\n    } else {\n      console.log('todo implement update');\n    }\n  }\n  getInsance(e) {\n    this.editor = e;\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-12 col-md-6\">\n              <ul>\n                {this.state.issues.map(item => {\n                  const issue = item.node;\n                  return (\n                    <li\n                      key={issue.id}\n                      onClick={() => this.onIssueSelect(issue)}\n                    >\n                      {issue.title}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <div className=\"col-sm-12 col-md-6\">\n              <button onClick={() => this.onNewNote()}>New Note</button>\n              <input\n                type=\"text\"\n                value={this.state.selectedIssue.title}\n                onChange={e => this.handleTitleChange(e)}\n              />\n              <SimpleMDE\n                getMdeInstance={(e)=>this.getInsance(e)} // <-- set callback prop\n                onChange={e => this.handleDescriptionChange(e)}\n                value={this.state.selectedIssue.bodyText}\n              />\n              <button onClick={() => this.onSaveIssue()}>Save Changes</button>\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}